//// EXERCICIO 1 

/////Escreva uma função que receba dois números e retorne o maior deles (com retorno de valor e sem retorno de valor).

#include <stdio.h>

float maior(float v1, float v2) /////// RETORNO DE VALOR
{
if (v1 > v2)
{ return (v1);}

else
{ return(v2); }
}


void higher(float v1, float v2) ///////SEM RETORNO 
{
if (v1 > v2)
{ printf("O maior numero sera %f: \n" , v1);}


else
{ printf("O maior numero sera %f: \n" , v2); }
}

int main()
{
float n1,n2;
printf("Escreva dois numeros: \n\n");
scanf("%f%f", &n1, &n2);
printf("O maior numero sera %f: \n" , maior(n1,n2)); ///// RETORNO
higher(n1,n2);  /// SEM RETORNO
return 0;
}



\\\\\\\ exercicio 2


\\\  Faça uma função que receba um número inteiro de 1 a 12 e imprima em tela o mês e a sua quantidade de dias de acordo com o número digitado pelo usuário.

#include <stdio.h>

void mes(int num)
{
int n;
n = num - 1;
const char *v[] = { "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro" };
int d[] = { 31, 28, 31, 30, 31, 30, 30, 31, 30, 31, 30, 31 };

printf("O mês de %s tem %d dias", v[n], d[n]);
}

int main()
{
int ind;
printf("Insira um numero de 1 a 12");
scanf("%d", &ind);
mes(ind);

return 0;
}


\\\\ exercicio 3

\\\\\ Escreva uma função que receba uma temperatura em graus Fahrenheit e a retorne convertida em graus Celsius. 

#include <stdio.h>
float cel(float num)
{
float graus;
graus = (num - 32) / (5.0/9.0) ;
return(graus);
}


int main()
{
float far;
printf("Escreva a temperatura em farenheit: \n\n");
scanf("%f", &far);
printf("A temperatura equivalente em celsius sera de %f graus", cel(far)); 
return 0;
}

\\\\\\ EXERCICIO 4

\\\\ Escreva uma função que receba a altura e o raio de um cilindro circular e retorne volume desse cilindro.

#include <stdio.h>
float vol(float h, float r)
{
float v;
v = 3.14*r*r / h ;
return(v);
}


int main()
{
float alt, raio;
printf("Insira a altura do cilindro: \n\n");
scanf("%f", &alt);
printf("Insira o raio do cilindro: \n \n");
scanf("%f", &raio);
printf("O volume do cilindro sera %f", vol(alt, raio)); 
return 0;
}

\\\\ EXERCICIO 5

\\\\ Escreva uma função para o cálculo do volume de uma esfera.

#include <stdio.h>
#include <math.h>
float volesf(float r)
{
float v;
v = 4*M_PI*r*r*r /3;
return(v);
}

int main()
{
float raio;
printf("Insira o raio da esfera: \n\n");
scanf( "%f", &raio);
printf("O volume da esfera sera %f \n" , volesf(raio));
return 0;
}

\\\\ EXERCICIO 6

\\\Calcule e retorne o IMC (Índice de Massa Corporal) dessa pessoa:

#include <stdio.h>
void imc(float h, float w)
{
float ind;
ind = w / (h*h) ;
printf("O IMC corporal sera de %f", ind);
}

int main()
{
float alt, peso;
printf(" Insira sua altura: \n");
scanf("%f", &alt);
printf(" Insira seu peso: \n");
scanf("%f", &peso);
imc(alt, peso);
return 0;
}




\\\\\\\\\\ exercicio 7

\\\\Elabore uma função que receba três números inteiros, representando horas, minutos e segundo. A função deve retornar esse horário convertido em segundos.

#include <stdio.h>

int seconds(int h, int m, int s)
{
int seg;
seg = h*360 + m*60 + s;

return (seg);
}

int main()
{
int hrs, min, sec;
printf("Insira o total de horas \n");
scanf("%d", &hrs);
printf("Insira o total de minutos \n");
scanf("%d", &min);
printf("Insira o total de segundos \n");
scanf("%d", &sec);
printf("A soma dos valores resulta em %d segundos", seconds(hrs, min, sec));
return 0;
}

\\\\\\\\\ exercicio 8

\\\\\\\\\\\Elabore uma função para verificar se um número é um quadrado perfeito. Um quadrado perfeito é um número inteiro não negativo que pode ser expresso como o quadrado de outro número inteiro. 

#include <stdio.h>
#include <math.h>

void qp(int num)
{
int n;
n = sqrt(num);
if (num == n*n)
{ printf("O numero e um quadrado perfeito \n "); }
else
{ printf("O numero nao e um quadrado perfeito \n"); }

}

int main()
{
int m;
printf("digite um numero: \n");
scanf("%d", &m);
qp(m);
return 0;
}

\\\\\\\\\ exercicio 9

\\\\\\\\\\\ Elabore uma função que receba três notas de um aluno como parâmetros e uma letra. Se a letra for “A”, a função deverá calcular a média aritmética das notas do aluno; se for “P”, deverá calcular a média ponderada, com pesos 5, 3 e 2. Retorne
a média calculada para o programa principal.

#include <stdio.h>


void media( float n1, float n2, float n3, char c)
{
float ma, mp;
if ( c == 'A')
{ 
ma = (n1 + n2 + n3) / 3;
printf("A media aritimetica sera %f \n", ma);
}
else if ( c == 'P' )
{
mp = ( n1*5 + n2*3 + n3 * 2 ) /10;
printf("A media ponderada sera %f \n", mp);
}
}

int main()
{
float m1, m2, m3;
char c1;
printf("Digite as 3 notas: \n");
scanf("%f%f%f", &m1, &m2, &m3);
printf("Digite A para media aritimetica ou P para ponderada \n");
scanf(" %c", &c1);
media(m1,m2,m3,c1);
return 0;
}


///// EXERCICIO 10

/// Escreva uma função que receba dois valores numéricos e um símbolo. Esse símbolo representará a operação que se deseja efetuar com os números.

#include <stdio.h>

float op( float a, float b, char c)
{
float res;
if ( c == '+' )
{ res = a + b; }

else if ( c == '-')
{ res = a - b ; }

else if( c == '/')
{ res = a/b ; }

else if (c == '*')
{ res = a*b; }

return(res);

}

int main()

{
    float n1, n2;
    char c1;
    printf("Escreva dois numeros \n");
    scanf("%f%f", &n1, &n2);
    printf("Digite o simbolo + para adicao, - para subtracao, / para divisao ou * para multiplicacao \n");
    scanf(" %c", &c1);
    printf("O resultado da operacao entre %f e %f sera %f \n", n1, n2, op(n1,n2,c1));
    return 0;
      
}


\\\\\\\\ EXERCICIO 11
\\\ Escreva uma função que receba por parâmetros dois valores inteiros x e y ecalcule e retorne o resultado de x^y para o programa principal. 

#include <stdio.h>

int pot(int x, int y)
{ 
	int i, p;
	p = x;
	for(i=1; i < y; i++)
	{	p = (x)*p ;
	}
	return p;

}

int main()

{
	int a, b;
	printf("Insira dois numeros \n");
	scanf("%d%d", &a, &b);
	printf("O numero %d elevado a %d resultara em %d", a, b, pot(a,b));
	return 0;
}

\\\\\\ EXERCICIO 12

\\\\\\Escreva uma função que receba um número inteiro positivo n. Calcule e retorne o somatório de 1 até n: 1 + 2 + 3 + ... + n.

#include <stdio.h>

int proga(int x)
{ 
	int i, p;
	p = 0;
	for(i=0; i <= x; i++)
	{	p = p + i ;
	}
	return p;

}

int main()

{
	int a;
	printf("Insira um numero \n");
	scanf("%d", &a);
	printf("A progressao aritimetica ate esse numero sera: %d", proga(a));
	return 0;
}

\\\\\\\\ EXERCICIO 13

\\\\\\ Elabore uma função que receba como parâmetro um valor inteiro n e gere como saída n linhas com pontos de exclamação
#include <stdio.h>

void linhas(int n)
{ 
	int j = 1, i;
	while (j<=n)
	{
		for(i=0 ; i<j; i++)
		{ 
			printf("!");
		}
		j++;
		printf("\n");
	}

}


int main()

{
	int a;
	printf("Insira um numero \n");
	scanf("%d", &a);
	linhas(a);
	return 0;
}

\\\\\\\\\ EXERCICIO 14

\\\\\\\\\\\ Escreva uma função que receba um número inteiro positivo e retorne o maior fator primo desse número.
#include <stdio.h>
#include <math.h>

int primos(int n)
{
    int i;

    int maior = 0;
    for(i=3; i <= n*n ; i = i + 2)
    {
        while( n % i == 0 )
        {
            maior = i;
            n /=i;
        }
    }
  return (maior);
    
}
int main()
{
    int num;
    printf("digite um numero \n");
    scanf("%d", &num);
    printf("o maior divisor primo sera: %d", primos(num));
    return 0;
}


\\\\\\\ EXERCICIO 15
\\\\ Escreva uma função que receba um número inteiro positivo n. Calcule e retorne o seu fatorial n!: n! = n * ( – 1) * (n – 2) * ... * 1.
#include <stdio.h>
#include <math.h>

int fatorial(int n)
{
    int sum = 1, i;
    for(i=0; i<n; i++)
    sum = sum * i + sum;
    return sum;
}

int main()
{
    int a;
    printf("digite um numero: \n");
    scanf("%d", &a);
    printf("o fatorial sera %d", fatorial(a));
    return 0;
}



\\\\\\\\\ EXERCICIO 16
\\\\\\ . Faça uma função que receba um inteiro N como parâmetro. Calcule e retorne o
resultado da seguinte série S:


#include <stdio.h>

float serie(float n)
{
	float divi = 0;
	int i;
	for(i=1; i<=n; i++)
	{
		divi = ( ((i*i) + 1) / (i + 3) )+ divi ;
	}
	return(divi);
}

int main()
{
	float num;
	printf("digite um numero \n");
	scanf("%f", &num);
	printf("O resultado sera %f", serie(num));
	return 0;
}

\\\\\\\\ EXERCICIO 17 (NAO TESTADO)
\\\\\\\\\  Faça uma função que receba como parâmetro o valor de um ângulo em graus e calcule o valor do seno desse ângulo usando a sua respectiva série de Taylor
#include <stdio.h>
#include <math.h>

long fat(int nat) {
    if (nat == 0 || nat == 1) 
	{
        return 1;
 	}
else
	{
	return nat * fat(nat - 1);
	}
}
float sen(float g)
{
    float n = g*M_PI/180.0;
    int i;
    float soma = 0;
    for(i=0; i<5; i ++)
    {
        if (i%2 == 0)
        soma = soma + pow(n, 2*i +1)/fat(2*i +1);
        else
        soma = soma - pow(n, 2*i +1)/fat(2*i +1);
    }
    return(soma);
}
int main()
{
    float num;
    printf("digite um numero \n");
    scanf("%f", &num);
    printf("O valor do seno do angulo e %f", sen(num));
    return 0;
}


\\\ EXERCICIO 18
\\\Faça uma função que receba como parâmetro o valor de um ângulo em graus e calcule o valor do cosseno desse ângulo usando a sua respectiva série de Taylor:

#include <stdio.h>
#include <math.h>

long fat(int nat) {
    if (nat == 0 || nat == 1) 
	{
        return 1;
 	}
else
	{
	return nat * fat(nat - 1);
	}
}

float coss(float g)
{
    float n = g*M_PI/180.0;
    int i;
    float soma = 0;
    for(i=0; i<5; i ++)
    {
        if (i%2 == 0)
        soma = soma + pow(n, 2*i)/fat(2*i);
        else
        soma = soma - pow(n, 2*i)/fat(2*i);
    }
    return(soma);
}
int main()
{
    float num;
    printf("digite um numero \n");
    scanf("%f", &num);
    printf("O valor do cosseno do angulo e %f", coss(num));
    return 0;
}

\\\\\\\\\ EXERCICIO 19
\\\\\\\\\\\ Faça uma função que calcule e retorne o número neperiano e, e = 2,71828183.
#include <stdio.h>
#include <math.h>

long fat(int nat) {
    if (nat == 0 || nat == 1) 
	{
        return 1;
 	}
else
	{
	return nat * fat(nat - 1);
	}
}
float neperio(int n)
{
    int i;
    float e = 1;
   for(i=1; i<=n; i++)
   {
       e = (1.0 / fat(i)) + e;
   }
   return(e);
}
int main()
{
    int num;
    printf("digite um numero \n");
    scanf("%d", &num);
    printf("O numero neperiano para %d repeticoes sera: %f", num, neperio(num));
    return 0;
}

//////////////// LISTA RECURSIVIDADE

\\\\\\\\ EXERCICIO 1: Escreva uma função recursiva que calcule a soma dos n primeiros cubos.

#include <stdio.h>
#include <math.h>

long scubik(int n)

{
    int i;
    
    if(n == 1)
    {
    return 1;
    }
    else
    {
    return (pow(n, 3) + scubik(n-1));
    }
}

int main()
{
    int num;
    printf("digite um numero: \n");
    scanf("%d", &num);
    printf("A soma dos cubos dos %d primeiros numeros sera: %ld \n", num, scubik(num) );
}


\\\\\\ EXERCICIO 2: Crie uma função recursiva que receba um número inteiro N e retorne o somatório dos números de 1 a N.

#include <stdio.h>
#include <math.h>

int soma(int n)

{
    
    if(n == 1)
    {
    return 1;
    }
    else
    {
    return (n + soma(n-1));
    }
}

int main()
{
    int num;
    printf("digite um numero: \n");
    scanf("%d", &num);
    printf("A soma dos %d primeiros numeros sera: %d \n", num, soma(num) );
}

\\\\\\ EXERCICIO 3: Crie uma função recursiva que receba um número inteiro N e imprima todos os números naturais de 0 até N em ordem crescente.
#include <stdio.h>
#include <math.h>

void print(int i, int n)

{
    if(i > n)
    {
    printf("\n");
    }
    else
    {
    printf("%d ", i);
    print(i+1, n);
    }
}

int main()
{
    int num;
    printf("digite um numero: \n");
    scanf("%d", &num);
    print(1, num);
}


\\\\\\\ EXERCICIO 4:  Crie uma função recursiva que receba um número inteiro N e imprima todos os números naturais de 0 até N em ordem decrescente.
#include <stdio.h>
#include <math.h>

void print(int n)

{
    
    if(n == 0)
    {
    printf("\n");
    }
    else
    {
    printf("%d ", n);
    print(n-1);
    }
}

int main()
{
    int num;
    printf("digite um numero: \n");
    scanf("%d", &num);
    print(num);
}


\\\\\\ EXERCICIO 5: Crie uma função recursiva que retorne a soma dos elementos de um vetor de inteiros.
#include <stdio.h>
#include <math.h>

int sumvet(int i, int n, int vet[])

{
    if(i == n)
    {
    return 1;
    }
    else
    {
    return (vet[i] + sumvet(i+1, n, vet));
    }
}

int main()
{
    int num, i;
    printf("digite o tamanho do vetor: \n");
    scanf("%d", &num);
    int v[num];
    printf("digite os %d elementos do vetor: \n", num);
    for(i=0; i<num; i++)
    {
        scanf("%d", &v[i]);
    }
    printf("A soma vetorial sera: %d \n", sumvet(1, num, v));
}


\\\\\\ EXERCICO 6:  Crie uma função recursiva que retorne a média dos elementos de um vetor de inteiros.
#include <stdio.h>
#include <math.h>

int sumvet(int i, int n, int vet[])

{
    if(i == n)
    {
    return 0;
    }
    else
    {
    return (vet[i] + sumvet(i+1, n, vet));
    }

}

int main()
{
    int num, i;
    printf("digite o tamanho do vetor: \n");
    scanf("%d", &num);
    int v[num];
    printf("digite os %d elementos do vetor: \n", num);
    for(i=0; i<num; i++)
    {
        scanf("%d", &v[i]);
    }
    float media = sumvet(0, num, v) / (float)num;
    printf("A media sera: %f \n", media);
}

\\\\\\\ EXERCICIO 7: Escreva uma função recursiva que receba por parâmetro dois valores inteiros x e y e calcule e retorne o resultado de xy para o programa principal.
#include <stdio.h>
#include <math.h>

int multi(int x, int y)
{
    if (y == 0)
    return 1;
    else
    return (x*multi(x, y-1));
}

int main()
{
    int xis, yip;
    printf("digite x: \n");
    scanf("%d", &xis);
        printf("digite y: \n");
    scanf("%d", &yip);
    printf("O resultado de x elevado a y sera: %d \n", multi(xis, yip));
}

\\\\\\ exercicio 8: Crie uma função recursiva que calcule a multiplicação por somas sucessivas de dois inteiros.

#include <stdio.h>
#include <math.h>

int multi(int a, int b)
{
    if(b==0)
    return 0;
    else
    return (a + multi(a, b-1));
    
    
}

int main()
{
    int n, m;
    printf("Insira dois numeros para multiplicacao: \n");
    scanf("%d%d", &n, &m);
    printf("O resultado da multiplicacao sera: %d \n", multi(n,m));

    return 0;
}

\\\\\\ EXERCICO 9: Escreva uma função recursiva que receba um número inteiro, maior ou igual a zero, e retorne o enésimo termo da sequência de Fibonacci.
#include <stdio.h>
#include <math.h>

int fibbo(int a)
{
    if(a==0)
    return 0;
    if(a==1)
    return 0;
    if(a==2)
    return 1;
    else
    return (fibbo(a-1) + fibbo(a-2));
    
    
}

int main()
{
    int n;
    printf("Insira UM numero : \n");
    scanf("%d", &n);
    if (n>= 0)
    printf("O %dº numero da soma de fibbonaci sera: %d \n", n, fibbo(n));
    else
    printf("O numero nao e valido. \n");

    return 0;
}


\\\\\\\ LISTA PONTEIROS

\\\\\EX 1: Escreva um programa que contenha duas variáveis inteiras. Compare seus endereços e exiba o maior endereço.

#include <stdio.h>
#include <math.h>

int main()
{
int a = 2, b = 11;
int *c, *d;

c = &a;
d = &b;

	if ( c > d )
	printf("O maior endereco sera do valor %d: 		%d", (*c) , c);
	else
	printf("O maior endereco sera do valor %d: 		%d", (*d), d);
	
return 0;
}

\\\\\ EX 2: Escreva um programa que contenha duas variáveis inteiras. Leia essas variáveis do teclado. Em seguida, compare seus endereços e exiba o
\\ conteúdo do maior endereço.
#include <stdio.h>
#include <math.h>

int main()
{
int a, b;
int *c, *d;

c = &a;
d = &b;

printf("Insira dois valores: \n");
scanf("%d%d", c, d);

	if ( c > d )
	printf("O conteudo do maior endereco %d sera: 		%d", c, (*c));
	else
	printf("O conteudo do maior endereco %d sera:  		%d", d, (*d));
	
return 0;
}

\\\\\\\ EX 3: Crie um programa que contenha um array de float com 10 elementos. Imprima o endereço de cada posição desse array.

#include <stdio.h>
#include <math.h>

int main()
{
	int i;
	float v[10] = {1,2,3,4,5,6,7,8,9,10};
	float *p;
	p = &v[0];
	
		for(i=0; i<10; i++)
		{
			printf("O endereco do elemento %d sera:		%d \n", i+1, (p+i));
		}

}
\\\\\ EX 4: Crie um programa que contenha uma matriz de float com três linhas e três colunas. Imprima o endereço de cada posição dessa matriz.

#include <stdio.h>
#include <math.h>

int main()
{
	int i, j;
	float m[3][3] = {1,2,3, 1,2,3, 1,2,3};
	float *p;
	p = &m[0][0];
	
		for(i=0; i<3; i++)
		{
			for(j=0; j<3; j++)
			printf("O endereco do elemento na posicao[%d][%d] sera:		%p \n", i+1, j+1, (p+i));
		}

}
