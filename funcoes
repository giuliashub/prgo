/// funções

#include <stdio.h>
#include <math.h>

////// se a funçao nao retorna valor, ela começa como void --> volta printf

float divisao(float n1, float n2) ////// PRECISA DO PARENTESES, avisar o cmpilador antes --> a função n vai na main
{ 
float divi = n1/n2;
return(divi);
}


int main()
{
float m1, m2; //// se a função chama int, a variavel que vai entrar nele tem que ser int
printf("escreva dois numeros");
scanf("%f %f", &m1, &m2);

printf("A divisao tera resultado de %f \n", divisao(m1,m2));

}


/////// RECURSIVIDADE

///// é chamar uma função varias vezes ate ela atender a uma certa condição

int fatorial(int n)
{
if (n==0)
{ return 1;} 
else
{ return (n * fatorial(n-1));   } /////// essa é a recursividade
}

\\\\\\ pra definir o idioma, usar:

#include <locale.h>

int main() {
    setlocale(LC_ALL, "Portuguese");
}

\\\\ LEMBRANDO de como funciona o laço for

for(i=0; i < 3; i++)
{
printf("digite um numero", i);
scanf("%d", &v[i]); ///// armazena os valores em um vetor
}

\\\\\ funco de potencia e raiz

#include <math.h>

s = sqrt(n); ///// raiz de n
p = pow(n,2); //// potencia de n elevado a dois


\\\\\\\\ EXERICIO FUNCOES
#include <stdio.h>

void media(float n1, float n2)
{
	float m;
	m = (n1+n2)/2;
	
	if (m>=9)
	{
		printf("Media final foi %f : Conceito A", m);
	}
	else if (m >= 7.5 && m < 9)
	{
		printf("Media final foi %f : Conceito B", m);
	}
	else if (m >= 5 && m < 7.5)
	{
		printf("Media final foi %f : Conceito C", m);
	}
	else if (m < 5)
	{
		printf("Media final foi %f : Conceito F", m);
	}
}

int main()

{
	float a, b;
	printf("Insira duas notas \n");
	scanf("%f%f", &a, &b);
	media(a,b);
	return 0;
}
\\\\\\\\\\\\\\\\ PONTEIROS

\\\\\\ o ponteiro é usado pra devolver o conteudo da variavel apontada (*) ou o endereço de memoria (&)

int *idade ; \\\\\ === o * é o ponteiro

\\\ int *p em byte 20 e valor 24
\\ O ponteiro pode ser incrementado:
\\ p++ == incrementa o endereço de bytes de memoria (int tem 2 bytes, ent vai pro byte 22)
\\ (*p)++ == incremento do valor da variavel(24 vai para 25)
\\*(p++) == incrementa o endereço de memoria e acessa o valor da variavel nele (procura quem esta no byte 22)

\\\ SÓ PODE FAZER SUBTRAÇÃO E SO SE FOR EM INT

Para ponteiros em vetores, teriamos:

int m[5]= {1,2,3,4,5};
int *p;
p = m;
printf("O elemento 2 sera: %d", *(p + 1)};  \\\ é o mesmo que:
printf(""O elemento 2 sera: %d", m[1]};

char s[] = "OiTudoBem";
char *p1 = s; \\\ isso quer dizer que p1 aponta pro s[0], que é o caracter O;
